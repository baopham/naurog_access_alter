<?php
function access_alter_node_access_records_alter(&$grants, $node) {
  $type = is_string($node) ? $node : $node->type;
  // Get all the referenced fields and their settings
  $nodeaccess_userreference = variable_get('nodeaccess_userreference', array());

  // If the content type has no user referenced fields, return
  if (!isset($nodeaccess_userreference[$type]) || empty($nodeaccess_userreference[$type]))
    return;

  // Get the group's content access
  $wrapper = entity_metadata_wrapper('node', $node);
  $content_access = !empty($wrapper->{OG_CONTENT_ACCESS_FIELD}) ? $wrapper->{OG_CONTENT_ACCESS_FIELD}->value() : OG_CONTENT_ACCESS_DEFAULT;

  $og_private = FALSE;
  foreach ($grants as $key => $val) {
    if ($content_access == OG_CONTENT_ACCESS_DEFAULT && strpos($val['realm'], 'og_access') !== FALSE ) {
      $grants[$key]['priority'] = 1;
      $og_private = TRUE;
    }
    elseif ($content_access != OG_CONTENT_ACCESS_PUBLIC && $val['realm'] == 'nodeaccess_userreference') {
      $grants[$key]['priority'] = 1;
    }
  }

  // If the node is set to group's default and $og_private is FALSE, then it mean the group is set to public
  // Hence, increase the priority of nodeaccess_userreference_all to 1
  if ($content_access == OG_CONTENT_ACCESS_DEFAULT && !$og_private) {
    foreach ($grants as $key => $val) {
      if ($val['realm'] == 'nodeaccess_userreference_all')
        $grants[$key]['priority'] = 1;
    }
  }
}
